# tgbot/handlers/user/start.py

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
# --- –ò–º–ø–æ—Ä—Ç—ã ---
from loader import logger
from database import requests as db
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π XUIClient ---
from xui.init_client import XUIClient
from tgbot.services.subscription import check_subscription
from tgbot.keyboards.inline import main_menu_keyboard, back_to_main_menu_keyboard, channels_subscribe_keyboard

# –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
start_router = Router()

# =============================================================================
# --- –ë–õ–û–ö: –°–¢–ê–†–¢ –ë–û–¢–ê –ò –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê ---
# =============================================================================

async def give_trial_subscription(user_id: int, bot: Bot, xui: XUIClient, chat_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 3x-ui –Ω–∞ 14 –¥–Ω–µ–π, –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ ID, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π.
    """
    trial_days = 14
    xui_username = f"user_{user_id}"
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–Ω–µ–ª–∏ 3x-ui
        result_uuid = await xui.add_user(username=xui_username, expire_days=trial_days)
        if not result_uuid:
            raise Exception("XUIClient failed to create user.")

        logger.info(f"Successfully created 3x-ui user '{xui_username}' with {trial_days} trial days for user {user_id}.")

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.update_user_xui_username(user_id, xui_username)
        await db.extend_user_subscription(user_id, days=trial_days)
        await db.set_trial_received(user_id)

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=chat_id,
            text=(
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <b>{trial_days} –¥–Ω–µ–π</b>.\n"
                "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à –∫–ª—é—á-–∫–æ–Ω—Ñ–∏–≥ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
            ),
            reply_markup=main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"Failed to give trial subscription to user {user_id}: {e}", exc_info=True)
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


# --- –ì–õ–ê–í–ù–´–ô –•–ï–ù–î–õ–ï–† –ö–û–ú–ê–ù–î–´ /start ---
@start_router.message(CommandStart())
async def process_start_command(message: Message, command: CommandObject, bot: Bot):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    
    user, created = await db.get_or_create_user(user_id, full_name, username)

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò (–ù–ï–ó–ê–í–ò–°–ò–ú–û) ---
    if created and command and command.args and command.args.startswith('ref'):
        # ... (—ç—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        try:
            referrer_id = int(command.args[3:])
            if referrer_id != user_id and await db.get_user(referrer_id):
                await db.set_user_referrer(user_id, referrer_id)
                logger.info(f"User {user_id} was referred by {referrer_id}.")
                try:
                    await bot.send_message(referrer_id, f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}!")
                except Exception: pass
        except (ValueError, IndexError, TypeError): pass

    # --- –°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    if created:
        welcome_text = (
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!</b>\n\n"
            "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π VPN-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π, –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n\n"
            "<b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n"
            "üîπ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
            "üîπ –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ —Ü–µ–Ω–∑—É—Ä—ã.\n"
            "üîπ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n"
            "–ß—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –º—ã –¥–∞—Ä–∏–º –≤–∞–º <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏!</b>"
        )
        await message.answer(welcome_text, reply_markup=main_menu_keyboard())
        return

    # --- –°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –°–¢–ê–†–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{full_name}</b>!", reply_markup=main_menu_keyboard())


# --- –ù–û–í–´–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –ö–ù–û–ü–ö–ò "–ü–û–õ–£–ß–ò–¢–¨ –ë–ï–°–ü–õ–ê–¢–ù–û" ---
@start_router.callback_query(F.data == "start_trial_process")
async def start_trial_process_handler(call: CallbackQuery, bot: Bot, xui: XUIClient):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ.
    """
    user_id = call.from_user.id
    
    # --- –ù–û–í–ê–Ø, –í–ê–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
    # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await db.get_user(user_id)
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –æ–Ω —É–∂–µ —Ç—Ä–∏–∞–ª
    if user and user.has_received_trial:
        await call.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", show_alert=True)
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await call.message.edit_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{call.from_user.full_name}</b>!",
            reply_markup=main_menu_keyboard()
        )
        return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(bot, user_id)
    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, —Å—Ä–∞–∑—É –≤—ã–¥–∞–µ–º —Ç—Ä–∏–∞–ª
        await call.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥...", show_alert=True)
        await call.message.delete()
        await give_trial_subscription(user_id, bot, xui, call.message.chat.id)
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
        channels = await db.get_all_required_channels()
        if not channels:
            logger.warning(f"User {user_id} is starting trial, but no channels are in DB. Giving trial immediately.")
            await call.answer("–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥...", show_alert=True)
            await call.message.delete()
            await give_trial_subscription(user_id, bot, xui, call.message.chat.id)
            return

        keyboard = channels_subscribe_keyboard(channels)
        await call.message.edit_text(
            "‚ùóÔ∏è <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.</b>\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª –Ω–∏–∂–µ.",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

# --- –•–ï–ù–î–õ–ï–† –î–õ–Ø –ö–ù–û–ü–ö–ò –ü–†–û–í–ï–†–ö–ò ---
@start_router.callback_query(F.data == "check_subscription")
async def handle_check_subscription(call: CallbackQuery, bot: Bot, xui: XUIClient):
    user_id = call.from_user.id
    
    user = await db.get_user(user_id)
    if user and user.has_received_trial:
        await call.answer("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É.", show_alert=True)
        await call.message.delete()
        await call.message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return

    is_subscribed = await check_subscription(bot, user_id)

    if is_subscribed:
        await call.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥...", show_alert=True)
        await call.message.delete()
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º bot –∏–∑ –≤—ã–∑–æ–≤–∞ ---
        await give_trial_subscription(user_id=user_id, bot=bot, xui=xui, chat_id=call.message.chat.id)
    else:
        await call.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º XUIClient –≤–º–µ—Å—Ç–æ MarzClientCache ---
async def activate_referral_bonus(message: Message, referrer_id: int, xui: XUIClient, bot: Bot):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞."""
    user_id = message.from_user.id
    bonus_days = 3
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ---
    xui_username = f"user_{user_id}" 
    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ---
        result = await xui.add_user(username=xui_username, expire_days=bonus_days)

        if not result:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª None, –∑–Ω–∞—á–∏—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å
            raise Exception("XUIClient returned None, user was not created.")

        logger.info(f"Successfully created 3x-ui user '{xui_username}' with {bonus_days} bonus days.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à–∏ –ë–î
        await db.set_user_referrer(user_id, referrer_id)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –ë–î ---
        await db.update_user_xui_username(user_id, xui_username)
        await db.extend_user_subscription(user_id, days=bonus_days)
        
        await message.answer(f"üéâ –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∏ –ø–æ–ª—É—á–∏–ª–∏ <b>–ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {bonus_days} –¥–Ω—è</b>!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try:
            await bot.send_message(referrer_id, f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}!")
        except Exception as e:
            logger.error(f"Could not send notification to referrer {referrer_id}: {e}")
            
    except Exception as e:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ª–æ–≥–∞ ---
        logger.error(f"Failed to create 3x-ui user for referral bonus for user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

# =============================================================================
# --- –ë–õ–û–ö: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –ü–†–û–ì–†–ê–ú–ú–´ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
# –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å API –ø–∞–Ω–µ–ª–∏, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å.
# =============================================================================

async def show_referral_info(message: Message, bot: Bot):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
    user_id = message.from_user.id
    bot_info = await bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start=ref{user_id}"
    user_data = await db.get_user(user_id)
    referral_count = await db.count_user_referrals(user_id)

    text = (
        "ü§ù <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ —ç—Ç–æ –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã!\n\n"
        "üîó <b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b>\n"
        f"<code>{referral_link}</code>\n"
        "<i>(–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</i>\n\n"
        f"üë§ <b>–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b> {referral_count} —á–µ–ª.\n"
        f"üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏:</b> {user_data.referral_bonus_days if user_data else 0} –¥–Ω.\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>7 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π</b> –∑–∞ –∫–∞–∂–¥—É—é –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º."
    )
    
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text, reply_markup=back_to_main_menu_keyboard())
    else:
        await message.answer(text, reply_markup=back_to_main_menu_keyboard())

@start_router.message(Command("referral"))
async def referral_command_handler(message: Message, bot: Bot):
    await show_referral_info(message, bot)

@start_router.callback_query(F.data == "referral_program")
async def referral_program_handler(call: CallbackQuery, bot: Bot):
    await call.answer()
    await show_referral_info(call, bot)
    
@start_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await call.answer()
    text = f'üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}!'
    reply_markup = main_menu_keyboard()

    try:
        await call.message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest:
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass
        await call.message.answer(text, reply_markup=reply_markup)