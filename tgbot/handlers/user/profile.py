# tgbot/handlers/user/profile.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

from aiogram import Router, F, types, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from datetime import datetime

from loader import logger
from xui.init_client import XUIClient
from tgbot.keyboards.inline import profile_keyboard
from tgbot.services import qr_generator
from tgbot.services.utils import format_traffic, get_xui_user_info, get_user_attribute

profile_router = Router()


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ö–ê–ó–ê –ü–†–û–§–ò–õ–Ø ---
async def show_profile_logic(event: Message | CallbackQuery, xui: XUIClient, bot: Bot):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º –∏ —Å—Å—ã–ª–∫–æ–π.
    """
    user_id = event.from_user.id
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ –ø–∞–Ω–µ–ª–∏ 3x-ui
    db_user, xui_user = await get_xui_user_info(event, xui)
    
    # –ï—Å–ª–∏ get_xui_user_info –≤–µ—Ä–Ω—É–ª–∞ None, –æ–Ω–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    if not xui_user or not db_user or not db_user.xui_username:
        return

    # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ (—Å—Ç–∞—Ç—É—Å, –¥–∞—Ç–∞, —Ç—Ä–∞—Ñ–∏–∫)
    is_enabled = get_user_attribute(xui_user, 'enable', False)
    expiry_time_ms = get_user_attribute(xui_user, 'expiryTime', 0)
    is_active = is_enabled and expiry_time_ms > (datetime.now().timestamp() * 1000)
    status_str = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
    
    expire_date_str = datetime.fromtimestamp(expiry_time_ms / 1000).strftime('%d.%m.%Y %H:%M') if expiry_time_ms else "–ù–∏–∫–æ–≥–¥–∞"

    up = get_user_attribute(xui_user, 'up', 0)
    down = get_user_attribute(xui_user, 'down', 0)
    used_traffic = up + down
    data_limit = get_user_attribute(xui_user, 'totalGB', 0)
    
    used_traffic_str = format_traffic(used_traffic)
    data_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç" if data_limit == 0 else format_traffic(data_limit)

    # 3. --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–û–õ–£–ß–ê–ï–ú –°–°–´–õ–ö–£ –û–î–ù–ò–ú –ú–ï–¢–û–î–û–ú ---
    # –í—Å—è —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∫–∏ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞
    full_sub_url = await xui.get_user_config_link(db_user.xui_username)
    
    if not full_sub_url:
        full_sub_url = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

    # 4. –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üîë <b>–°—Ç–∞—Ç—É—Å:</b> <code>{status_str}</code>\n"
        f"üóì <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> <code>{expire_date_str}</code>\n\n"
        f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <code>{used_traffic_str}</code>\n"
        f"–õ–∏–º–∏—Ç: <code>{data_limit_str}</code>"
        # –°—Å—ã–ª–∫—É –¥–æ–±–∞–≤–∏–º –≤ caption –∫ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    )

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å QR-–∫–æ–¥–æ–º
    try:
        qr_code_stream = qr_generator.create_qr_code(full_sub_url)
        qr_photo = types.BufferedInputFile(qr_code_stream.getvalue(), filename="qr.png")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
        caption_with_link = profile_text + f"\n\nüîó <b>–í–∞—à –∫–ª—é—á-–∫–æ–Ω—Ñ–∏–≥ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):</b>\n<code>{full_sub_url}</code>"

        if isinstance(event, types.CallbackQuery):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                await event.message.edit_media(
                    media=types.InputMediaPhoto(media=qr_photo, caption=caption_with_link),
                    reply_markup=profile_keyboard(full_sub_url)
                )
                return # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º
            except TelegramBadRequest:
                # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º), —É–¥–∞–ª—è–µ–º –∏ —à–ª–µ–º –Ω–æ–≤–æ–µ
                try:
                    await event.message.delete()
                except TelegramBadRequest:
                    pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await bot.send_photo(
            chat_id=user_id,
            photo=qr_photo,
            caption=caption_with_link,
            reply_markup=profile_keyboard(full_sub_url)
        )

    except Exception as e:
        logger.error(f"Error sending profile with QR: {e}", exc_info=True)
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å QR, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        text_with_link = profile_text + f"\n\nüîó <b>–í–∞—à –∫–ª—é—á-–∫–æ–Ω—Ñ–∏–≥ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):</b>\n<code>{full_sub_url}</code>"
        if isinstance(event, types.CallbackQuery):
             await event.message.edit_text(text_with_link, reply_markup=profile_keyboard(full_sub_url))
        else:
             await event.answer(text_with_link, reply_markup=profile_keyboard(full_sub_url))


# --- –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø –ö–û–ú–ê–ù–î–´ –ò –ö–ù–û–ü–ö–ò ---
@profile_router.message(Command("profile"))
async def profile_command_handler(message: Message, xui: XUIClient, bot: Bot):
    await show_profile_logic(message, xui, bot)

@profile_router.callback_query(F.data == "my_profile")
async def my_profile_callback_handler(call: CallbackQuery, xui: XUIClient, bot: Bot):
    await call.answer("–û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    await show_profile_logic(call, xui, bot)